List of available builtins in Python 3.6.x direct from Python 3 Docs.
abs(x)

Return the absolute value of a number. The argument may be an integer or a floating point number.
If the argument is a complex number, its magnitude is returned.


all(iterable)

    Return True if all elements of the iterable are true (or if the iterable is empty). Equivalent to:
    def all(iterable):
    for element in iterable:
        if not element:
            return False
    return True


any(iterable)

    Return True if any element of the iterable is true. If the iterable is empty, return False. Equivalent to:
    def any(iterable):
        for element in iterable:
            if element:
                return True
        return False


 ascii(object)

    As repr(), return a string containing a printable representation of an object,
    but escape the non-ASCII characters in the string returned by repr() using \x, \u or \U escapes.



bin(x)

        Convert an integer number to a binary string prefixed with “0b”. The result is a valid Python expression.
        If x is not a Python int object, it has to define an __index__() method that returns an integer. Some examples:
        >>>
        >>> bin(3)
        '0b11'
        >>> bin(-10)
        '-0b1010'
        If prefix “0b” is desired or not, you can use either of the following ways.
        >>>
        >>> format(14, '#b'), format(14, 'b')
        ('0b1110', '1110')
        >>> f'{14:#b}', f'{14:b}'
        ('0b1110', '1110')
    See also format() for more information.


class bool([x])

    Return a Boolean value, i.e. one of True or False. x is converted using the standard truth testing procedure.
    If x is false or omitted, this returns False; otherwise it returns True. The bool class is a subclass of int
    (see Numeric Types — int, float, complex). It cannot be subclassed further. Its only instances are False and True
    (see Boolean Values).


class bytearray([source[, encoding[, errors]]])

    Return a new array of bytes. The bytearray class is a mutable sequence of integers in the range 0 <= x < 256.
    It has most of the usual methods of mutable sequences, described in Mutable Sequence Types,
    as well as most methods that the bytes type has, see Bytes and Bytearray Operations.
    The optional source parameter can be used to initialize the array in a few different ways:
        If it is a string, you must also give the encoding (and optionally, errors) parameters; bytearray() then
        converts the string to bytes using str.encode().
        If it is an integer, the array will have that size and will be initialized with null bytes.
        If it is an object conforming to the buffer interface, a read-only buffer of the object will be used to
        initialize the bytes array.
        If it is an iterable, it must be an iterable of integers in the range 0 <= x < 256, which are used as the
        initial contents of the array.
    Without an argument, an array of size 0 is created.
    See also Binary Sequence Types — bytes, bytearray, memoryview and Bytearray Objects.


class bytes([source[, encoding[, errors]]])

    Return a new “bytes” object, which is an immutable sequence of integers in the range 0 <= x < 256. bytes is an
    immutable version of bytearray – it has the same non-mutating methods and the same indexing and slicing behavior.
    Accordingly, constructor arguments are interpreted as for bytearray().
    Bytes objects can also be created with literals, see String and Bytes literals.
    See also Binary Sequence Types — bytes, bytearray, memoryview, Bytes Objects, and Bytes and Bytearray Operations.



callable(object)

    Return True if the object argument appears callable, False if not. If this returns true, it is still possible that
    a call fails, but if it is false, calling object will never succeed. Note that classes are callable
    (calling a class returns a new instance); instances are callable if their class has a __call__() method.
    New in version 3.2: This function was first removed in Python 3.0 and then brought back in Python 3.2.


chr(i)

    Return the string representing a character whose Unicode code point is the integer i.
    For example, chr(97) returns the string 'a', while chr(8364) returns the string '€'. This is the inverse of ord().
    The valid range for the argument is from 0 through 1,114,111 (0x10FFFF in base 16). ValueError will be raised if i
    is outside that range.


classmethod(function)

    Return a class method for function.


compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)

    Compile the source into a code or AST object. Code objects can be executed by exec() or eval().
    source can either be a normal string, a byte string, or an AST object.
    Refer to the ast module documentation for information on how to work with AST objects.
    The filename argument should give the file from which the code was read; pass some recognizable value if it wasn’t
    read from a file ('<string>' is commonly used).


class complex([real[, imag]])

    Return a complex number with the value real + imag*1j or convert a string or number to a complex number.
    If the first parameter is a string, it will be interpreted as a complex number and the function must be called
    without a second parameter. The second parameter can never be a string. Each argument may be any numeric type
    (including complex). If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion
    like int and float. If both arguments are omitted, returns 0j.



delattr(object, name)

    This is a relative of setattr(). The arguments are an object and a string. The string must be the name of one
    of the object’s attributes. The function deletes the named attribute, provided the object allows it. For example,
    delattr(x, 'foobar') is equivalent to del x.foobar.



class dict(**kwarg)
class dict(mapping, **kwarg)
class dict(iterable, **kwarg)

    Create a new dictionary. The dict object is the dictionary class. See dict and Mapping Types — dict for
    documentation about this class.
    For other containers see the built-in list, set, and tuple classes, as well as the collections module.



dir([object])

    Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list
    of valid attributes for that object. If the object has a method named __dir__(), this method will be called and must
    return the list of attributes. This allows objects that implement a custom __getattr__() or __getattribute__()
    function to customize the way dir() reports their attributes.
    If the object does not provide __dir__(), the function tries its best to gather information from the object’s
    __dict__ attribute, if defined, and from its type object. The resulting list is not necessarily complete, and may be
    inaccurate when the object has a custom __getattr__().
    The default dir() mechanism behaves differently with different types of objects, as it attempts to produce the most
    relevant, rather than complete, information:
        If the object is a module object, the list contains the names of the module’s attributes.
        If the object is a type or class object, the list contains the names of its attributes, and recursively of the
        attributes of its bases. Otherwise, the list contains the object’s attributes’ names, the names of its class’s
        attributes, and recursively of the attributes of its class’s base classes.



divmod(a, b)

    Take two (non complex) numbers as arguments and return a pair of numbers consisting of their quotient and remainder
    when using integer division. With mixed operand types, the rules for binary arithmetic operators apply.
    For integers, the result is the same as (a // b, a % b). For floating point numbers the result is (q, a % b),
    where q is usually math.floor(a / b) but may be 1 less than that. In any case q * b + a % b is very close to a,
    if a % b is non-zero it has the same sign as b, and 0 <= abs(a % b) < abs(b).


enumerate(iterable, start=0)

    Return an enumerate object. iterable must be a sequence, an iterator, or some other object which supports iteration.
    The __next__() method of the iterator returned by enumerate() returns a tuple containing a count
    (from start which defaults to 0) and the values obtained from iterating over iterable.


eval(expression, globals=None, locals=None)

    The arguments are a string and optional globals and locals. If provided, globals must be a dictionary. If provided,
    locals can be any mapping object.
    The expression argument is parsed and evaluated as a Python expression (technically speaking, a condition list)
    using the globals and locals dictionaries as global and local namespace. If the globals dictionary is present and
    lacks ‘__builtins__’, the current globals are copied into globals before expression is parsed.
    This means that expression normally has full access to the standard builtins module and restricted environments are
    propagated. If the locals dictionary is omitted it defaults to the globals dictionary. If both dictionaries are
    omitted, the expression is executed in the environment where eval() is called. The return value is the result of the
    evaluated expression. Syntax errors are reported as exceptions.


exec(object[, globals[, locals]])

    This function supports dynamic execution of Python code. object must be either a string or a code object.
    If it is a string, the string is parsed as a suite of Python statements which is then executed
    (unless a syntax error occurs). [1] If it is a code object, it is simply executed. In all cases,
    the code that’s executed is expected to be valid as file input (see the section “File input” in the
    Reference Manual). Be aware that the return and yield statements may not be used outside of function definitions
    even within the context of code passed to the exec() function. The return value is None.


filter(function, iterable)

    Construct an iterator from those elements of iterable for which function returns true. iterable may be either
    a sequence, a container which supports iteration, or an iterator. If function is None, the identity function is
    assumed, that is, all elements of iterable that are false are removed.
    Note that filter(function, iterable) is equivalent to the generator expression (item for item in iterable if
    function(item)) if function is not None and (item for item in iterable if item) if function is None.


class float([x])

    Return a floating point number constructed from a number or string x.
    If the argument is a string, it should contain a decimal number, optionally preceded by a sign, and optionally
    embedded in whitespace. The optional sign may be '+' or '-'; a '+' sign has no effect on the value produced.
    The argument may also be a string representing a NaN (not-a-number), or a positive or negative infinity.
    More precisely, the input must conform to the following grammar after leading and trailing whitespace characters
    are removed



format(value[, format_spec])

    Convert a value to a “formatted” representation, as controlled by format_spec. The interpretation of format_spec
    will depend on the type of the value argument, however there is a standard formatting syntax that is used by most
    built-in types: Format Specification Mini-Language.
    The default format_spec is an empty string which usually gives the same effect as calling str(value).
    A call to format(value, format_spec) is translated to type(value).__format__(value, format_spec) which bypasses the
    instance dictionary when searching for the value’s __format__() method. A TypeError exception is raised if the
    method search reaches object and the format_spec is non-empty, or if either the format_spec or the return value are
    not strings.
    Changed in version 3.4: object().__format__(format_spec) raises TypeError if format_spec is not an empty string.


class frozenset([iterable])

    Return a new frozenset object, optionally with elements taken from iterable. frozenset is a built-in class.
    See frozenset and Set Types — set, frozenset for documentation about this class.
    For other containers see the built-in set, list, tuple, and dict classes, as well as the collections module.


getattr(object, name[, default])

    Return the value of the named attribute of object. name must be a string. If the string is the name of one of the
    object’s attributes, the result is the value of that attribute. For example, getattr(x, 'foobar') is equivalent
    to x.foobar. If the named attribute does not exist, default is returned if provided, otherwise AttributeError is
    raised.


globals()

    Return a dictionary representing the current global symbol table. This is always the dictionary of the current
    module (inside a function or method, this is the module where it is defined, not the module from which it is called).



hasattr(object, name)
    The arguments are an object and a string. The result is True if the string is the name of one of the object’s
    attributes, False if not. (This is implemented by calling getattr(object, name) and seeing whether it raises
    an AttributeError or not.)


hash(object)

        Return the hash value of the object (if it has one). Hash values are integers. They are used to quickly
        compare dictionary keys during a dictionary lookup. Numeric values that compare equal have the same hash
        value (even if they are of different types, as is the case for 1 and 1.0).



help([object])

    Invoke the built-in help system. (This function is intended for interactive use.) If no argument is given,
    the interactive help system starts on the interpreter console. If the argument is a string, then the string is
    looked up as the name of a module, function, class, method, keyword, or documentation topic, and a help page is printed on the console. If the argument is any other kind of object, a help page on the object is generated.
    This function is added to the built-in namespace by the site module.
    Changed in version 3.4: Changes to pydoc and inspect mean that the reported signatures for callables are now more
    comprehensive and consistent.

hex(x)

    Convert an integer number to a lowercase hexadecimal string prefixed with “0x”. If x is not a Python int object,
    it has to define an __index__() method that returns an integer.



id(object)

    Return the “identity” of an object. This is an integer which is guaranteed to be unique and constant for this
    object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() value.
    CPython implementation detail: This is the address of the object in memory.


input([prompt])

    If the prompt argument is present, it is written to standard output without a trailing newline.
    The function then reads a line from input, converts it to a string (stripping a trailing newline),
    and returns that. When EOF is read, EOFError is raised.


class int(x=0)
class int(x, base=10)

    Return an integer object constructed from a number or string x, or return 0 if no arguments are given.
    If x is a number, return x.__int__(). For floating point numbers, this truncates towards zero.
    If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an
    integer literal in radix base. Optionally, the literal can be preceded by + or - (with no space in between) and
    surrounded by whitespace. A base-n literal consists of the digits 0 to n-1, with a to z (or A to Z) having values
    10 to 35. The default base is 10. The allowed values are 0 and 2–36. Base-2, -8, and -16 literals can be optionally
    prefixed with 0b/0B, 0o/0O, or 0x/0X, as with integer literals in code. Base 0 means to interpret exactly as a code
    literal, so that the actual base is 2, 8, 10, or 16, and so that int('010', 0) is not legal, while int('010') is,
    as well as int('010', 8).



isinstance(object, classinfo)

    Return true if the object argument is an instance of the classinfo argument, or of a (direct, indirect or virtual)
    subclass thereof. If object is not an object of the given type, the function always returns false. If classinfo is
    a tuple of type objects (or recursively, other such tuples), return true if object is an instance of any of the
    types. If classinfo is not a type or tuple of types and such tuples, a TypeError exception is raised.


issubclass(class, classinfo)

    Return true if class is a subclass (direct, indirect or virtual) of classinfo. A class is considered a subclass of
    itself. classinfo may be a tuple of class objects, in which case every entry in classinfo will be checked.
    In any other case, a TypeError exception is raised.

iter(object[, sentinel])

    Return an iterator object. The first argument is interpreted very differently depending on the presence of the
    second argument. Without a second argument, object must be a collection object which supports the iteration
    protocol (the __iter__() method), or it must support the sequence protocol (the __getitem__() method with integer
    arguments starting at 0). If it does not support either of those protocols, TypeError is raised.
    If the second argument, sentinel, is given, then object must be a callable object.
    The iterator created in this case will call object with no arguments for each call to its __next__() method;
    if the value returned is equal to sentinel, StopIteration will be raised, otherwise the value will be returned.



len(s)

    Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes,
    tuple, list, or range) or a collection (such as a dictionary, set, or frozen set).



class list([iterable])

    Rather than being a function, list is actually a mutable sequence type, as documented in Lists and Sequence Types
    — list, tuple, range.



locals()

    Update and return a dictionary representing the current local symbol table. Free variables are returned by locals()
    when it is called in function blocks, but not in class blocks.



map(function, iterable, …)

    Return an iterator that applies function to every item of iterable, yielding the results. If additional iterable
     arguments are passed, function must take that many arguments and is applied to the items from all iterables
     in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted. For cases where
     the function inputs are already arranged into argument tuples, see itertools.starmap().


max(iterable, *[, key, default])
max(arg1, arg2, *args[, key])

    Return the largest item in an iterable or the largest of two or more arguments.
    If one positional argument is provided, it should be an iterable. The largest item in the iterable is returned.
    If two or more positional arguments are provided, the largest of the positional arguments is returned.
    There are two optional keyword-only arguments. The key argument specifies a one-argument ordering function like that
    used for list.sort(). The default argument specifies an object to return if the provided iterable is empty.
    If the iterable is empty and default is not provided, a ValueError is raised.
    If multiple items are maximal, the function returns the first one encountered. This is consistent with other
    sort-stability preserving tools such as sorted(iterable, key=keyfunc, reverse=True)[0] and
    heapq.nlargest(1, iterable, key=keyfunc).


memoryview(obj)

    Return a “memory view” object created from the given argument. See Memory Views for more information.


min(iterable, *[, key, default])
min(arg1, arg2, *args[, key])

    Return the smallest item in an iterable or the smallest of two or more arguments.
    If one positional argument is provided, it should be an iterable. The smallest item in the iterable is returned.
    If two or more positional arguments are provided, the smallest of the positional arguments is returned.
    There are two optional keyword-only arguments. The key argument specifies a one-argument ordering function like that
    used for list.sort(). The default argument specifies an object to return if the provided iterable is empty.
    If the iterable is empty and default is not provided, a ValueError is raised.
    If multiple items are minimal, the function returns the first one encountered. This is consistent with other
    sort-stability preserving tools such as sorted(iterable, key=keyfunc)[0] and
    heapq.nsmallest(1, iterable, key=keyfunc).
    New in version 3.4: The default keyword-only argument.


next(iterator[, default])

    Retrieve the next item from the iterator by calling its __next__() method. If default is given, it is returned if
    the iterator is exhausted, otherwise StopIteration is raised.


class object

    Return a new featureless object. object is a base for all classes. It has the methods that are common to all
    instances of Python classes. This function does not accept any arguments.


oct(x)

    Convert an integer number to an octal string prefixed with “0o”. The result is a valid Python expression.
    If x is not a Python int object, it has to define an __index__() method that returns an integer.


open(file, mode=’r’, buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)

    Open file and return a corresponding file object. If the file cannot be opened, an OSError is raised.
    file is a path-like object giving the pathname (absolute or relative to the current working directory)
    of the file to be opened or an integer file descriptor of the file to be wrapped. (If a file descriptor is given,
    it is closed when the returned I/O object is closed, unless closefd is set to False.)
    mode is an optional string that specifies the mode in which the file is opened. It defaults to 'r' which means open
    for reading in text mode. Other common values are 'w' for writing (truncating the file if it already exists),
    'x' for exclusive creation and 'a' for appending (which on some Unix systems, means that all writes append to the
    end of the file regardless of the current seek position). In text mode, if encoding is not specified the encoding
    used is platform dependent: locale.getpreferredencoding(False) is called to get the current locale encoding.
    (For reading and writing raw bytes use binary mode and leave encoding unspecified.) The available modes are:

    Character 	Meaning
    'r' 	open for reading (default)
    'w' 	open for writing, truncating the file first
    'x' 	open for exclusive creation, failing if the file already exists
    'a' 	open for writing, appending to the end of the file if it exists
    'b' 	binary mode
    't' 	text mode (default)
    '+' 	open a disk file for updating (reading and writing)
    'U' 	universal newlines mode (deprecated)

    The default mode is 'r' (open for reading text, synonym of 'rt'). For binary read-write access, the mode 'w+b'
    opens and truncates the file to 0 bytes. 'r+b' opens the file without truncation.



ord(c)

    Given a string representing one Unicode character, return an integer representing the Unicode code point of that character. For example, ord('a') returns the integer 97 and ord('€') (Euro sign) returns 8364. This is the inverse of chr().


pow(x, y[, z])

    Return x to the power y; if z is present, return x to the power y, modulo z (computed more efficiently
    than pow(x, y) % z). The two-argument form pow(x, y) is equivalent to using the power operator: x**y.
    The arguments must have numeric types. With mixed operand types, the coercion rules for binary arithmetic
    operators apply. For int operands, the result has the same type as the operands (after coercion) unless the second
    argument is negative; in that case, all arguments are converted to float and a float result is delivered.
    For example, 10**2 returns 100, but 10**-2 returns 0.01. If the second argument is negative, the third argument
    must be omitted. If z is present, x and y must be of integer types, and y must be non-negative.


print(*objects, sep=’ ‘, end=’\n’, file=sys.stdout, flush=False)

    Print objects to the text stream file, separated by sep and followed by end. sep, end, file and flush, if present,
    must be given as keyword arguments.
    All non-keyword arguments are converted to strings like str() does and written to the stream, separated by sep
    and followed by end. Both sep and end must be strings; they can also be None, which means to use the default values.
    If no objects are given, print() will just write end.
    The file argument must be an object with a write(string) method; if it is not present or None, sys.stdout will
    be used. Since printed arguments are converted to text strings, print() cannot be used with binary mode file
    objects. For these, use file.write(...) instead.
    Whether output is buffered is usually determined by file, but if the flush keyword argument is true, the stream is
    forcibly flushed.



class property(fget=None, fset=None, fdel=None, doc=None)

    Return a property attribute.
    fget is a function for getting an attribute value. fset is a function for setting an attribute value. fdel
    is a function for deleting an attribute value. And doc creates a docstring for the attribute.



range(stop)
range(start, stop[, step])

    Rather than being a function, range is actually an immutable sequence type, as documented in
    Ranges and Sequence Types — list, tuple, range.


repr(object)

    Return a string containing a printable representation of an object. For many types, this function makes an attempt
    to return a string that would yield an object with the same value when passed to eval(), otherwise the
    representation is a string enclosed in angle brackets that contains the name of the type of the object together
    with additional information often including the name and address of the object. A class can control what this
    function returns for its instances by defining a __repr__() method.


reversed(seq)

    Return a reverse iterator. seq must be an object which has a __reversed__() method or supports the sequence
    protocol (the __len__() method and the __getitem__() method with integer arguments starting at 0).


round(number[, ndigits])

    Return number rounded to ndigits precision after the decimal point. If ndigits is omitted or is None, it returns
    the nearest integer to its input.
    For the built-in types supporting round(), values are rounded to the closest multiple of 10 to the power minus
    ndigits; if two multiples are equally close, rounding is done toward the even choice (so, for example, both
    round(0.5) and round(-0.5) are 0, and round(1.5) is 2). Any integer value is valid for ndigits
    (positive, zero, or negative). The return value is an integer if called with one argument,
    otherwise of the same type as number.



class set([iterable])

    Return a new set object, optionally with elements taken from iterable. set is a built-in class. See set and Set
    Types — set, frozenset for documentation about this class.

    For other containers see the built-in frozenset, list, tuple, and dict classes, as well as the collections module.


setattr(object, name, value)

    This is the counterpart of getattr(). The arguments are an object, a string and an arbitrary value. The string may
    name an existing attribute or a new attribute. The function assigns the value to the attribute, provided the object
    allows it. For example, setattr(x, 'foobar', 123) is equivalent to x.foobar = 123.


class slice(stop)
class slice(start, stop[, step])

    Return a slice object representing the set of indices specified by range(start, stop, step). The start and step
    arguments default to None. Slice objects have read-only data attributes start, stop and step which merely return
    the argument values (or their default). They have no other explicit functionality; however they are used by
    Numerical Python and other third party extensions. Slice objects are also generated when extended indexing syntax
    is used. For example: a[start:stop:step] or a[start:stop, i]. See itertools.islice() for an alternate version that
    returns an iterator.


sorted(iterable, *, key=None, reverse=False)

    Return a new sorted list from the items in iterable.
    Has two optional arguments which must be specified as keyword arguments.
    key specifies a function of one argument that is used to extract a comparison key from each list element:
    key=str.lower. The default value is None (compare the elements directly).
    reverse is a boolean value. If set to True, then the list elements are sorted as if each comparison were reversed.
    Use functools.cmp_to_key() to convert an old-style cmp function to a key function.
    The built-in sorted() function is guaranteed to be stable. A sort is stable if it guarantees not to change the
    relative order of elements that compare equal — this is helpful for sorting in multiple passes
    (for example, sort by department, then by salary grade).


staticmethod(function)

    Return a static method for function.
    A static method does not receive an implicit first argument. To declare a static method, use this idiom:
    class C:
        @staticmethod
        def f(arg1, arg2, ...): ...



class str(object=”)
class str(object=b”, encoding=’utf-8’, errors=’strict’)

    Return a str version of object. See str() for details.
    str is the built-in string class. For general information about strings, see Text Sequence Type — str.


sum(iterable[, start])

    Sums start and the items of an iterable from left to right and returns the total. start defaults to 0.
    The iterable’s items are normally numbers, and the start value is not allowed to be a string.
    For some use cases, there are good alternatives to sum(). The preferred, fast way to concatenate a sequence of
    strings is by calling ''.join(sequence). To add floating point values with extended precision, see math.fsum().
    To concatenate a series of iterables, consider using itertools.chain().


super([type[, object-or-type]])

    Return a proxy object that delegates method calls to a parent or sibling class of type.
    This is useful for accessing inherited methods that have been overridden in a class.
    The search order is same as that used by getattr() except that the type itself is skipped.



tuple([iterable])

    Rather than being a function, tuple is actually an immutable sequence type, as documented in
    Tuples and Sequence Types — list, tuple, range.


class type(object)
class type(name, bases, dict)

    With one argument, return the type of an object. The return value is a type object and generally the same object
    as returned by object.__class__.
    The isinstance() built-in function is recommended for testing the type of an object, because it takes subclasses
    into account.
    With three arguments, return a new type object. This is essentially a dynamic form of the class statement.
    The name string is the class name and becomes the __name__ attribute; the bases tuple itemizes the base classes
    and becomes the __bases__ attribute; and the dict dictionary is the namespace containing definitions for
    class body and is copied to a standard dictionary to become the __dict__ attribute.



vars([object])

    Return the __dict__ attribute for a module, class, instance, or any other object with a __dict__ attribute.
    Objects such as modules and instances have an updateable __dict__ attribute; however, other objects may have write
    restrictions on their __dict__ attributes (for example, classes use a types.MappingProxyType to prevent direct
    dictionary updates).
    Without an argument, vars() acts like locals(). Note, the locals dictionary is only useful for reads since updates
    to the locals dictionary are ignored.


zip(*iterables)

    Make an iterator that aggregates elements from each of the iterables.
    Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences
    or iterables. The iterator stops when the shortest input iterable is exhausted. With a single iterable argument,
    it returns an iterator of 1-tuples. With no arguments, it returns an empty iterator.